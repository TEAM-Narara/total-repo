plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.narara'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.0'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
//    implementation 'com.vladmihalcea:hibernate-types-52:2.21.1'
//    implementation 'org.hibernate:hibernate-core:6.6.1.Final'
//    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // mariaDB 사용시 위의 사항 제거하고 여기로 해주세요
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //webSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // jwt
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    implementation 'io.jsonwebtoken:jjwt:0.12.6'

}

test{
    useJUnitPlatform()
    // true: 병렬 실행 활성화
    // false: 순차 실행 (기본값)
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'

    // SAME_THREAD: 같은 스레드에서 순차 실행
    // CONCURRENT: 별도 스레드에서 병렬 실행
    // ISOLATED: 완전히 격리된 환경에서 실행
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    // JVM이 사용 가능한 CPU 코어 수 중 절반을 사용
    maxParallelForks = (Runtime.runtime.availableProcessors() / 2) ?: 1
}
tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('copyYML', Copy) {
    from 's107-secret-value'
    include "application.yml"  // 원하는 YML 파일만 복사
    into 'src/main/resources'  // 파일을 복사할 위치
}

tasks.named('build') {
    dependsOn('copyYML')
}

// 혹은 processResources 작업과 연결
tasks.named('processResources') {
    dependsOn('copyYML')
}
