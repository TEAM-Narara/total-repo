plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id "org.sonarqube" version "5.0.0.4638"
}

group = 'com.narara'
version = '0.0.1-SNAPSHOT'
// jacocoDir 디렉토리 정의
ext {
    jacocoDir = new File(buildDir, "customJacocoReportDir")
}
if (!ext.jacocoDir.exists()) {
    ext.jacocoDir.mkdirs()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.0'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    annotationProcessor 'org.projectlombok:lombok'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // hibernate
    implementation 'org.hibernate:hibernate-core:6.6.1.Final'

    // db
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'
//    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // mariaDB 사용시 위의 사항 제거하고 여기로 해주세요

    // test db
    testRuntimeOnly 'org.postgresql:postgresql'

    //webSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // jwt
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    implementation 'io.jsonwebtoken:jjwt:0.12.6'

    // mail
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // queryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // controller test
    testImplementation 'io.rest-assured:rest-assured:5.5.0'

    // Mongo DB
//    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
}

test{
    useJUnitPlatform()
    // true: 병렬 실행 활성화
    // false: 순차 실행 (기본값)
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'

    // SAME_THREAD: 같은 스레드에서 순차 실행
    // CONCURRENT: 별도 스레드에서 병렬 실행
    // ISOLATED: 완전히 격리된 환경에서 실행
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    // JVM이 사용 가능한 CPU 코어 수 중 절반을 사용
    maxParallelForks = (Runtime.runtime.availableProcessors() / 2) ?: 1

    finalizedBy jacocoTestReport
}

tasks.register('copyYML', Copy) {
    from 's107-secret-value'
    include "application.yml"  // 원하는 YML 파일만 복사
    into 'src/main/resources'  // 파일을 복사할 위치
}

tasks.register('copyTestYML', Copy) {
    from 's107-secret-value'
    include "application-test.yml"  // 복사할 파일 지정
    into 'src/test/resources'       // 테스트 리소스 위치로 복사
}

tasks.named('build') {
    dependsOn('copyYML')
}

tasks.named('test') {
    dependsOn('copyTestYML')
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.named('processResources') {
    dependsOn('copyYML')
}

tasks.named('processTestResources') {
    dependsOn 'copyTestYML' // processTestResources가 copyTestYML에 의존성을 가지도록 설정
}

apply from: 'querydsl.gradle'
apply from: 'jacoco.gradle'
apply from: 'sonarqube.gradle'
